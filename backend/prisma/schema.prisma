generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  cpf           String        @unique
  birthDate     DateTime
  createdAt     DateTime      @default(now())

  transactions  Transaction[]
  accounts      Account[]
 
}


model Stock {
  id             Int           @id @default(autoincrement())
  symbol         String        @unique
  name           String
  sector         String
  currentPrice   Float
  dailyVariation Float
  createdAt      DateTime      @default(now())

  transactions   Transaction[] 
}

model FixedIncome {
  id                String   @id                 // ex: CDB001
  name              String
  type              String                       // CDB ou Tesouro Direto
  rate              Float
  rateType          String                       // "pre" ou "pos"
  maturity          DateTime
  minimumInvestment Float
  createdAt         DateTime   @default(now())

  transactions      Transaction[]
}

model Transaction {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int

  // O ativo pode ser uma ação (Stock) ou renda fixa (FixedIncome)
  stock           Stock?    @relation(fields: [stockId], references: [id])
  stockId         Int?

  fixedIncome     FixedIncome? @relation(fields: [fixedIncomeId], references: [id])
  fixedIncomeId   String?

  type            String    // 'buy' (por enquanto)
  amount          Int       // quantidade de cotas ou fração investida
  createdAt       DateTime  @default(now())
}

model Account {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  type      String    // 'corrente' ou 'investimento'
  balance   Float     @default(0)
  createdAt DateTime  @default(now())

  @@unique([userId, type])

  // Relacionamento futuro com movimentações e transferências
  // movimentacoesEnviadas     Movimentacao[] @relation("ContaOrigem")
  // movimentacoesRecebidas    Movimentacao[] @relation("ContaDestino")
}

